import Phaser from 'phaser';
import { SoundSystem } from '../systems/SoundSystem';

export class SettingsModal extends Phaser.GameObjects.Container {
    private background!: Phaser.GameObjects.Rectangle;
    private panel!: Phaser.GameObjects.Graphics;
    private title!: Phaser.GameObjects.Text;
    private soundSystem: SoundSystem;
    private lobbyMusicSlider!: Phaser.GameObjects.Container;
    private gameMusicSlider!: Phaser.GameObjects.Container;
    private sfxVolumeSlider!: Phaser.GameObjects.Container;
    private muteButton!: Phaser.GameObjects.Container;
    private blurSlider!: Phaser.GameObjects.Container;
    private closeButton!: Phaser.GameObjects.Text;
    private tabs!: Phaser.GameObjects.Container[];
    private tabContents!: Phaser.GameObjects.Container[];
    private currentTab: number = 0;

    constructor(scene: Phaser.Scene, soundSystem: SoundSystem) {
        super(scene, scene.scale.width / 2, scene.scale.height / 2);
        this.soundSystem = soundSystem;
        
        this.createModal();
        this.setVisible(false);
        scene.add.existing(this);
    }

    private createModal(): void {
        const { width, height } = this.scene.scale;
        
        // –ó–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π —Ñ–æ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        this.background = this.scene.add.rectangle(0, 0, width * 2, height * 2, 0x000000, 0.85);
        this.background.setInteractive();
        this.add(this.background);
        
        // –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        const panelWidth = Math.min(width * 0.9, 1200);
        const panelHeight = Math.min(height * 0.85, 700);
        
        this.panel = this.scene.add.graphics();
        this.panel.fillStyle(0x1a1a2e, 0.98);
        this.panel.fillRoundedRect(-panelWidth/2, -panelHeight/2, panelWidth, panelHeight, 25);
        this.panel.lineStyle(4, 0xffd700, 1);
        this.panel.strokeRoundedRect(-panelWidth/2, -panelHeight/2, panelWidth, panelHeight, 25);
        this.add(this.panel);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.title = this.scene.add.text(0, -panelHeight/2 + 40, '–ù–ê–°–¢–†–û–ô–ö–ò', {
            fontSize: '48px',
            fontFamily: 'Arial Black',
            color: '#ffd700',
            stroke: '#000000',
            strokeThickness: 4
        });
        this.title.setOrigin(0.5);
        this.add(this.title);
        
        // –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏
        this.createTabs(panelWidth, panelHeight);
        
        // –°–æ–∑–¥–∞—ë–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
        this.tabContents = [];
        this.createSoundTab(panelWidth, panelHeight);
        this.createControlsTab(panelWidth, panelHeight);
        this.createGraphicsTab(panelWidth, panelHeight);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        this.selectTab(0);
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.closeButton = this.scene.add.text(panelWidth/2 - 30, -panelHeight/2 + 40, '‚úï', {
            fontSize: '42px',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        });
        this.closeButton.setOrigin(0.5);
        this.closeButton.setInteractive({ useHandCursor: true });
        this.closeButton.on('pointerdown', () => this.hide());
        this.closeButton.on('pointerover', () => this.closeButton.setScale(1.2));
        this.closeButton.on('pointerout', () => this.closeButton.setScale(1));
        this.add(this.closeButton);
    }

    private createTabs(panelWidth: number, panelHeight: number): void {
        this.tabs = [];
        const tabNames = ['üîä –ó–≤—É–∫', 'üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üé® –ì—Ä–∞—Ñ–∏–∫–∞'];
        const tabWidth = 200;
        const tabHeight = 50;
        const startX = -tabWidth * 1.5;
        const y = -panelHeight/2 + 100;
        
        tabNames.forEach((name, index) => {
            const tab = this.scene.add.container(startX + index * (tabWidth + 10), y);
            
            const bg = this.scene.add.graphics();
            bg.fillStyle(index === 0 ? 0x3498db : 0x2c3e50, 1);
            bg.fillRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
            bg.lineStyle(2, index === 0 ? 0xffd700 : 0x666666, 1);
            bg.strokeRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
            bg.name = 'bg';
            tab.add(bg);
            
            const text = this.scene.add.text(0, 0, name, {
                fontSize: '20px',
                fontFamily: 'Arial',
                color: index === 0 ? '#ffffff' : '#aaaaaa'
            });
            text.setOrigin(0.5);
            text.name = 'text';
            tab.add(text);
            
            bg.setInteractive(new Phaser.Geom.Rectangle(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight), Phaser.Geom.Rectangle.Contains);
            bg.on('pointerdown', () => this.selectTab(index));
            bg.on('pointerover', () => {
                if (index !== this.currentTab) {
                    bg.clear();
                    bg.fillStyle(0x3a4a5c, 1);
                    bg.fillRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
                    bg.lineStyle(2, 0x999999, 1);
                    bg.strokeRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
                }
            });
            bg.on('pointerout', () => {
                if (index !== this.currentTab) {
                    bg.clear();
                    bg.fillStyle(0x2c3e50, 1);
                    bg.fillRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
                    bg.lineStyle(2, 0x666666, 1);
                    bg.strokeRoundedRect(-tabWidth/2, -tabHeight/2, tabWidth, tabHeight, 10);
                }
            });
            
            this.tabs.push(tab);
            this.add(tab);
        });
    }
    
    private selectTab(index: number): void {
        this.currentTab = index;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª –≤–∫–ª–∞–¥–æ–∫
        this.tabs.forEach((tab, i) => {
            const bg = tab.getByName('bg') as Phaser.GameObjects.Graphics;
            const text = tab.getByName('text') as Phaser.GameObjects.Text;
            
            bg.clear();
            if (i === index) {
                bg.fillStyle(0x3498db, 1);
                bg.fillRoundedRect(-100, -25, 200, 50, 10);
                bg.lineStyle(2, 0xffd700, 1);
                bg.strokeRoundedRect(-100, -25, 200, 50, 10);
                text.setColor('#ffffff');
            } else {
                bg.fillStyle(0x2c3e50, 1);
                bg.fillRoundedRect(-100, -25, 200, 50, 10);
                bg.lineStyle(2, 0x666666, 1);
                bg.strokeRoundedRect(-100, -25, 200, 50, 10);
                text.setColor('#aaaaaa');
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
        this.tabContents.forEach((content, i) => {
            content.setVisible(i === index);
        });
    }
    
    private createSoundTab(panelWidth: number, panelHeight: number): void {
        const container = this.scene.add.container(0, 0);
        const startY = -panelHeight/2 + 200;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –∑–≤—É–∫–∞
        const soundTitle = this.scene.add.text(0, startY - 30, 'üîä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞', {
            fontSize: '32px',
            fontFamily: 'Arial',
            color: '#ffd700'
        });
        soundTitle.setOrigin(0.5);
        container.add(soundTitle);
        
        // –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –ª–æ–±–±–∏
        this.createLobbyMusicControl(container, startY + 30);
        
        // –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –≤ –∏–≥—Ä–µ
        this.createGameMusicControl(container, startY + 100);
        
        // –ì—Ä–æ–º–∫–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.createSfxControl(container, startY + 170);
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
        this.createMuteControl(container, startY + 260);
        
        this.tabContents.push(container);
        this.add(container);
    }
    
    private createControlsTab(panelWidth: number, panelHeight: number): void {
        const container = this.scene.add.container(0, 0);
        const startY = -panelHeight/2 + 200;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫)
        const controlsTitle = this.scene.add.text(0, startY - 30, 'üéÆ –°—Ö–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', {
            fontSize: '32px',
            fontFamily: 'Arial',
            color: '#ffd700'
        });
        controlsTitle.setOrigin(0.5);
        container.add(controlsTitle);
        
        // –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const cardWidth = 360;
        const itemHeight = 35; // –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const cardPadding = 20; // –æ—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        const pcControls = [
            { keys: 'A/D ‚Üê‚Üí', action: '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ' },
            { keys: '–ü–†–û–ë–ï–õ', action: '–ü—Ä—ã–∂–æ–∫ (–¥–≤–æ–π–Ω–æ–π –¥–æ—Å—Ç—É–ø–µ–Ω)' },
            { keys: 'W ‚Üë', action: '–õ–∞–∑–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö –ø–æ –ª–∏–∞–Ω–∞–º' },
            { keys: 'S ‚Üì', action: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ / –°–ø—É—Å–∫ –ø–æ –ª–∏–∞–Ω–∞–º' },
            { keys: 'E', action: '–ó–∞—Ö–≤–∞—Ç/–æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ª–∏–∞–Ω' },
            { keys: 'SHIFT', action: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –±–µ–≥–∞' },
            { keys: 'ESC', action: '–ü–∞—É–∑–∞' }
        ];
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ PC
        const pcCardHeight = 85 + (pcControls.length * itemHeight) + cardPadding;
        
        // –ö–∞—Ä—Ç–æ—á–∫–∞ PC —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const pcCard = this.scene.add.graphics();
        pcCard.fillStyle(0x1e3a5f, 0.9);
        pcCard.fillRoundedRect(-cardWidth - 20, startY, cardWidth, pcCardHeight, 15);
        pcCard.lineStyle(3, 0x4fc3f7, 1);
        pcCard.strokeRoundedRect(-cardWidth - 20, startY, cardWidth, pcCardHeight, 15);
        container.add(pcCard);
        
        // –ò–∫–æ–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        const pcIcon = this.scene.add.text(-cardWidth/2 - 20, startY + 25, '‚å®Ô∏è', {
            fontSize: '32px'
        });
        pcIcon.setOrigin(0.5);
        container.add(pcIcon);
        
        const pcTitle = this.scene.add.text(-cardWidth/2 - 20, startY + 55, '–ö–õ–ê–í–ò–ê–¢–£–†–ê', {
            fontSize: '22px',
            fontFamily: 'Arial Black',
            color: '#4fc3f7'
        });
        pcTitle.setOrigin(0.5);
        container.add(pcTitle);
        
        pcControls.forEach((control, i) => {
            // –ö–ª–∞–≤–∏—à–∞
            const keyBg = this.scene.add.graphics();
            keyBg.fillStyle(0x2c5aa0, 1);
            keyBg.fillRoundedRect(-cardWidth + 10, startY + 85 + i * 35, 75, 24, 5);
            keyBg.lineStyle(1, 0x4fc3f7, 0.8);
            keyBg.strokeRoundedRect(-cardWidth + 10, startY + 85 + i * 35, 75, 24, 5);
            container.add(keyBg);
            
            const keyText = this.scene.add.text(-cardWidth + 47, startY + 97 + i * 35, control.keys, {
                fontSize: '11px',
                fontFamily: 'Arial',
                color: '#ffffff',
                fontStyle: 'bold'
            });
            keyText.setOrigin(0.5);
            container.add(keyText);
            
            // –î–µ–π—Å—Ç–≤–∏–µ
            const actionText = this.scene.add.text(-cardWidth + 95, startY + 97 + i * 35, control.action, {
                fontSize: '13px',
                fontFamily: 'Arial',
                color: '#e0e0e0'
            });
            actionText.setOrigin(0, 0.5);
            container.add(actionText);
        });
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const mobileControls = [
            { gesture: 'üïπÔ∏è –î–∂–æ–π—Å—Ç–∏–∫', action: '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ' },
            { gesture: 'üïπÔ∏è –í–≤–µ—Ä—Ö', action: '–ü—Ä—ã–∂–æ–∫' },
            { gesture: 'üïπÔ∏è –í–Ω–∏–∑', action: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ' },
            { gesture: '‚í∂ –ö–Ω–æ–ø–∫–∞ A', action: '–ü—Ä—ã–∂–æ–∫ (–¥–≤–æ–π–Ω–æ–π)' },
            { gesture: '‚í∑ –ö–Ω–æ–ø–∫–∞ B', action: '–ê—Ç–∞–∫–∞ (—Å–∫–æ—Ä–æ)' },
            { gesture: 'üëÜüëá –°–≤–∞–π–ø—ã', action: '–õ–∞–∑–∞–Ω–∏–µ –ø–æ –ª–∏–∞–Ω–∞–º' },
            { gesture: '‚è∏Ô∏è –ü–∞—É–∑–∞', action: '–ú–µ–Ω—é –ø–∞—É–∑—ã' }
        ];
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const mobileCardHeight = 85 + (mobileControls.length * itemHeight) + cardPadding;
        
        // –ö–∞—Ä—Ç–æ—á–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const mobileCard = this.scene.add.graphics();
        mobileCard.fillStyle(0x4a148c, 0.9);
        mobileCard.fillRoundedRect(20, startY, cardWidth, mobileCardHeight, 15);
        mobileCard.lineStyle(3, 0xba68c8, 1);
        mobileCard.strokeRoundedRect(20, startY, cardWidth, mobileCardHeight, 15);
        container.add(mobileCard);
        
        // –ò–∫–æ–Ω–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const mobileIcon = this.scene.add.text(cardWidth/2 + 20, startY + 25, 'üì±', {
            fontSize: '32px'
        });
        mobileIcon.setOrigin(0.5);
        container.add(mobileIcon);
        
        const mobileTitle = this.scene.add.text(cardWidth/2 + 20, startY + 55, '–°–ï–ù–°–û–†–ù–´–ô –≠–ö–†–ê–ù', {
            fontSize: '22px',
            fontFamily: 'Arial Black',
            color: '#ba68c8'
        });
        mobileTitle.setOrigin(0.5);
        container.add(mobileTitle);
        
        mobileControls.forEach((control, i) => {
            // –ñ–µ—Å—Ç
            const gestureText = this.scene.add.text(40, startY + 85 + i * 35, control.gesture, {
                fontSize: '12px',
                fontFamily: 'Arial',
                color: '#ffffff',
                fontStyle: 'bold'
            });
            container.add(gestureText);
            
            // –°—Ç—Ä–µ–ª–∫–∞
            const arrow = this.scene.add.text(150, startY + 85 + i * 35, '‚Üí', {
                fontSize: '12px',
                color: '#ba68c8'
            });
            container.add(arrow);
            
            // –î–µ–π—Å—Ç–≤–∏–µ
            const actionText = this.scene.add.text(165, startY + 85 + i * 35, control.action, {
                fontSize: '12px',
                fontFamily: 'Arial',
                color: '#e0e0e0'
            });
            container.add(actionText);
        });
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Å–æ—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫
        const maxCardHeight = Math.max(pcCardHeight, mobileCardHeight);
        const tipY = startY + maxCardHeight + 20;
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ –¥–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫
        const tipBg = this.scene.add.graphics();
        tipBg.fillStyle(0x1b5e20, 0.9);
        tipBg.fillRoundedRect(-280, tipY, 560, 45, 10);
        tipBg.lineStyle(2, 0x4caf50, 1);
        tipBg.strokeRoundedRect(-280, tipY, 560, 45, 10);
        container.add(tipBg);
        
        const tipIcon = this.scene.add.text(-250, tipY + 22, 'üí°', {
            fontSize: '20px'
        });
        tipIcon.setOrigin(0.5);
        container.add(tipIcon);
        
        const tipText = this.scene.add.text(-220, tipY + 22, '–°–û–í–ï–¢: –î–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É! –¢—Ä–æ–π–Ω–æ–π - —Å –±—É—Å—Ç–æ–º!', {
            fontSize: '14px',
            fontFamily: 'Arial',
            color: '#ffffff',
            fontStyle: 'bold'
        });
        tipText.setOrigin(0, 0.5);
        container.add(tipText);
        
        // –ë—É–¥—É—â–∏–π –≥–µ–π–º–ø–∞–¥
        const gamepadNote = this.scene.add.text(0, tipY + 60, 'üéÆ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–µ–π–º–ø–∞–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!', {
            fontSize: '16px',
            fontFamily: 'Arial',
            color: '#ffa726',
            fontStyle: 'italic'
        });
        gamepadNote.setOrigin(0.5);
        container.add(gamepadNote);
        
        container.setVisible(false);
        this.tabContents.push(container);
        this.add(container);
    }
    
    private createGraphicsTab(panelWidth: number, panelHeight: number): void {
        const container = this.scene.add.container(0, 0);
        const startY = -panelHeight/2 + 200;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∏
        const graphicsTitle = this.scene.add.text(0, startY - 30, 'üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∏', {
            fontSize: '32px',
            fontFamily: 'Arial',
            color: '#ffd700'
        });
        graphicsTitle.setOrigin(0.5);
        container.add(graphicsTitle);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º—ã—Ç–∏—è —Ñ–æ–Ω–∞
        this.createBlurControl(container, startY + 50);
        
        // –ë—É–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const futureSettings = [
            '–ö–∞—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü - —Å–∫–æ—Ä–æ!',
            '–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–µ–π - —Å–∫–æ—Ä–æ!',
            '–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ - —Å–∫–æ—Ä–æ!',
            'VSync - —Å–∫–æ—Ä–æ!'
        ];
        
        futureSettings.forEach((setting, i) => {
            const text = this.scene.add.text(0, startY + 150 + i * 40, setting, {
                fontSize: '20px',
                fontFamily: 'Arial',
                color: '#888888'
            });
            text.setOrigin(0.5);
            container.add(text);
        });
        
        container.setVisible(false);
        this.tabContents.push(container);
        this.add(container);
    }
    
    private createLobbyMusicControl(container: Phaser.GameObjects.Container, y: number): void {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const label = this.scene.add.text(-350, y, '–ú—É–∑—ã–∫–∞ –ª–æ–±–±–∏:', {
            fontSize: '22px',
            color: '#ffffff'
        });
        container.add(label);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
        this.lobbyMusicSlider = this.scene.add.container(100, y);
        
        // –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
        const track = this.scene.add.graphics();
        track.fillStyle(0x555555, 1);
        track.fillRoundedRect(-150, -5, 300, 10, 5);
        this.lobbyMusicSlider.add(track);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        const fill = this.scene.add.graphics();
        const lobbyVolume = parseFloat(localStorage.getItem('lobbyMusicVolume') || '0.2');
        fill.fillStyle(0x00ff00, 1);
        fill.fillRoundedRect(-150, -5, 300 * lobbyVolume, 10, 5);
        fill.name = 'fill';
        this.lobbyMusicSlider.add(fill);
        
        // –ü–æ–ª–∑—É–Ω–æ–∫
        const handle = this.scene.add.circle(-150 + 300 * lobbyVolume, 0, 15, 0xffffff);
        handle.setInteractive({ useHandCursor: true, draggable: true });
        handle.name = 'handle';
        this.lobbyMusicSlider.add(handle);
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç
        const percent = this.scene.add.text(170, 0, `${Math.round(lobbyVolume * 100)}%`, {
            fontSize: '20px',
            color: '#ffffff'
        });
        percent.setOrigin(0, 0.5);
        percent.name = 'percent';
        this.lobbyMusicSlider.add(percent);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('drag', (pointer: Phaser.Input.Pointer, dragX: number) => {
            const clampedX = Phaser.Math.Clamp(dragX, -150, 150);
            handle.x = clampedX;
            
            const volume = (clampedX + 150) / 300;
            localStorage.setItem('lobbyMusicVolume', volume.toString());
            
            // –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é, –ø—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å—Ä–∞–∑—É
            const menuScene = this.scene.scene.get('MenuScene');
            if (menuScene && menuScene.scene.isActive()) {
                this.soundSystem.setMusicVolume(volume);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            fill.clear();
            fill.fillStyle(0x00ff00, 1);
            fill.fillRoundedRect(-150, -5, 300 * volume, 10, 5);
            
            percent.setText(`${Math.round(volume * 100)}%`);
        });
        
        container.add(this.lobbyMusicSlider);
    }
    
    private createGameMusicControl(container: Phaser.GameObjects.Container, y: number): void {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const label = this.scene.add.text(-350, y, '–ú—É–∑—ã–∫–∞ –≤ –∏–≥—Ä–µ:', {
            fontSize: '22px',
            color: '#ffffff'
        });
        container.add(label);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
        this.gameMusicSlider = this.scene.add.container(100, y);
        
        // –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
        const track = this.scene.add.graphics();
        track.fillStyle(0x555555, 1);
        track.fillRoundedRect(-150, -5, 300, 10, 5);
        this.gameMusicSlider.add(track);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        const fill = this.scene.add.graphics();
        const gameVolume = parseFloat(localStorage.getItem('gameMusicVolume') || '0.2');
        fill.fillStyle(0x00ff00, 1);
        fill.fillRoundedRect(-150, -5, 300 * gameVolume, 10, 5);
        fill.name = 'fill';
        this.gameMusicSlider.add(fill);
        
        // –ü–æ–ª–∑—É–Ω–æ–∫
        const handle = this.scene.add.circle(-150 + 300 * gameVolume, 0, 15, 0xffffff);
        handle.setInteractive({ useHandCursor: true, draggable: true });
        handle.name = 'handle';
        this.gameMusicSlider.add(handle);
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç
        const percent = this.scene.add.text(170, 0, `${Math.round(gameVolume * 100)}%`, {
            fontSize: '20px',
            color: '#ffffff'
        });
        percent.setOrigin(0, 0.5);
        percent.name = 'percent';
        this.gameMusicSlider.add(percent);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('drag', (pointer: Phaser.Input.Pointer, dragX: number) => {
            const clampedX = Phaser.Math.Clamp(dragX, -150, 150);
            handle.x = clampedX;
            
            const volume = (clampedX + 150) / 300;
            localStorage.setItem('gameMusicVolume', volume.toString());
            
            // –ï—Å–ª–∏ –º—ã –≤ –∏–≥—Ä–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å—Ä–∞–∑—É
            const gameScene = this.scene.scene.get('GameScene');
            if (gameScene && gameScene.scene.isActive()) {
                this.soundSystem.setMusicVolume(volume);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            fill.clear();
            fill.fillStyle(0x00ff00, 1);
            fill.fillRoundedRect(-150, -5, 300 * volume, 10, 5);
            
            percent.setText(`${Math.round(volume * 100)}%`);
        });
        
        container.add(this.gameMusicSlider);
    }
    
    private createSfxControl(container: Phaser.GameObjects.Container, y: number): void {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const label = this.scene.add.text(-350, y, '–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:', {
            fontSize: '22px',
            color: '#ffffff'
        });
        container.add(label);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
        this.sfxVolumeSlider = this.scene.add.container(100, y);
        
        // –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
        const track = this.scene.add.graphics();
        track.fillStyle(0x555555, 1);
        track.fillRoundedRect(-150, -5, 300, 10, 5);
        this.sfxVolumeSlider.add(track);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        const fill = this.scene.add.graphics();
        const sfxVolume = this.soundSystem.getSfxVolume();
        fill.fillStyle(0x00ff00, 1);
        fill.fillRoundedRect(-150, -5, 300 * sfxVolume, 10, 5);
        fill.name = 'fill';
        this.sfxVolumeSlider.add(fill);
        
        // –ü–æ–ª–∑—É–Ω–æ–∫
        const handle = this.scene.add.circle(-150 + 300 * sfxVolume, 0, 15, 0xffffff);
        handle.setInteractive({ useHandCursor: true, draggable: true });
        handle.name = 'handle';
        this.sfxVolumeSlider.add(handle);
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç
        const percent = this.scene.add.text(170, 0, `${Math.round(sfxVolume * 100)}%`, {
            fontSize: '20px',
            color: '#ffffff'
        });
        percent.setOrigin(0, 0.5);
        percent.name = 'percent';
        this.sfxVolumeSlider.add(percent);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('drag', (pointer: Phaser.Input.Pointer, dragX: number) => {
            const clampedX = Phaser.Math.Clamp(dragX, -150, 150);
            handle.x = clampedX;
            
            const volume = (clampedX + 150) / 300;
            this.soundSystem.setSfxVolume(volume);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            fill.clear();
            fill.fillStyle(0x00ff00, 1);
            fill.fillRoundedRect(-150, -5, 300 * volume, 10, 5);
            
            percent.setText(`${Math.round(volume * 100)}%`);
            
            // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
            this.soundSystem.playSound('coin', { volume: volume * 0.5 });
        });
        
        container.add(this.sfxVolumeSlider);
    }
    
    private createMuteControl(container: Phaser.GameObjects.Container, y: number): void {
        this.muteButton = this.scene.add.container(0, y);
        
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏
        const bg = this.scene.add.graphics();
        const isMuted = this.soundSystem.getMuted();
        bg.fillStyle(isMuted ? 0xff0000 : 0x00ff00, 1);
        bg.fillRoundedRect(-150, -30, 300, 60, 15);
        bg.name = 'bg';
        this.muteButton.add(bg);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const text = this.scene.add.text(0, 0, isMuted ? 'üîá –ó–≤—É–∫ –í–´–ö–õ–Æ–ß–ï–ù' : 'üîä –ó–≤—É–∫ –í–ö–õ–Æ–ß–ï–ù', {
            fontSize: '28px',
            fontFamily: 'Arial',
            color: '#ffffff',
            stroke: '#000000',
            strokeThickness: 2
        });
        text.setOrigin(0.5);
        text.name = 'text';
        this.muteButton.add(text);
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        bg.setInteractive(new Phaser.Geom.Rectangle(-150, -30, 300, 60), Phaser.Geom.Rectangle.Contains);
        bg.on('pointerdown', () => {
            this.soundSystem.toggleMute();
            const muted = this.soundSystem.getMuted();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            bg.clear();
            bg.fillStyle(muted ? 0xff0000 : 0x00ff00, 1);
            bg.fillRoundedRect(-150, -30, 300, 60, 15);
            
            text.setText(muted ? 'üîá –ó–≤—É–∫ –í–´–ö–õ–Æ–ß–ï–ù' : 'üîä –ó–≤—É–∫ –í–ö–õ–Æ–ß–ï–ù');
        });
        
        bg.on('pointerover', () => {
            this.muteButton.setScale(1.05);
        });
        
        bg.on('pointerout', () => {
            this.muteButton.setScale(1);
        });
        
        container.add(this.muteButton);
    }
    
    private createBlurControl(container: Phaser.GameObjects.Container, y: number): void {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const label = this.scene.add.text(-350, y, '–†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞:', {
            fontSize: '22px',
            color: '#ffffff'
        });
        container.add(label);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
        this.blurSlider = this.scene.add.container(100, y);
        
        // –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
        const track = this.scene.add.graphics();
        track.fillStyle(0x555555, 1);
        track.fillRoundedRect(-150, -5, 300, 10, 5);
        this.blurSlider.add(track);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –∏–∑ localStorage (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 41%)
        const savedBlur = parseFloat(localStorage.getItem('backgroundBlur') || '0.41');
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        const fill = this.scene.add.graphics();
        fill.fillStyle(0x00aaff, 1);
        fill.fillRoundedRect(-150, -5, 300 * savedBlur, 10, 5);
        fill.name = 'fill';
        this.blurSlider.add(fill);
        
        // –ü–æ–ª–∑—É–Ω–æ–∫
        const handle = this.scene.add.circle(-150 + 300 * savedBlur, 0, 15, 0xffffff);
        handle.setInteractive({ useHandCursor: true, draggable: true });
        handle.name = 'handle';
        this.blurSlider.add(handle);
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç
        const percent = this.scene.add.text(170, 0, `${Math.round(savedBlur * 100)}%`, {
            fontSize: '20px',
            color: '#ffffff'
        });
        percent.setOrigin(0, 0.5);
        percent.name = 'percent';
        this.blurSlider.add(percent);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('dragstart', () => {
            // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.panel.setAlpha(0.5);
            this.title.setAlpha(0.5);
            this.closeButton.setAlpha(0.5);
            this.tabs.forEach(tab => tab.setAlpha(0.5));
            this.background.setAlpha(0.3);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('dragend', () => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            this.panel.setAlpha(1);
            this.title.setAlpha(1);
            this.closeButton.setAlpha(1);
            this.tabs.forEach(tab => tab.setAlpha(1));
            this.background.setAlpha(0.85);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        handle.on('drag', (pointer: Phaser.Input.Pointer, dragX: number) => {
            const clampedX = Phaser.Math.Clamp(dragX, -150, 150);
            handle.x = clampedX;
            
            const blurAmount = (clampedX + 150) / 300;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('backgroundBlur', blurAmount.toString());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            fill.clear();
            fill.fillStyle(0x00aaff, 1);
            fill.fillRoundedRect(-150, -5, 300 * blurAmount, 10, 5);
            
            percent.setText(`${Math.round(blurAmount * 100)}%`);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —Ñ–æ–Ω—É –≤ GameScene
            const gameScene = this.scene.scene.get('GameScene') as any;
            if (gameScene && gameScene.backgroundTile) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è
                if (blurAmount > 0) {
                    // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è —á–µ—Ä–µ–∑ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∞–ª—å—Ñ—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞
                    gameScene.backgroundTile.setAlpha(1 - blurAmount * 0.5);
                    gameScene.backgroundTile.setTint(0x888888 + Math.floor(0x777777 * (1 - blurAmount)));
                } else {
                    gameScene.backgroundTile.setAlpha(1);
                    gameScene.backgroundTile.clearTint();
                }
            }
        });
        
        container.add(this.blurSlider);
    }

    public show(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
        const { width, height } = this.scene.scale;
        this.setPosition(width / 2, height / 2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞
        this.background.setSize(width * 2, height * 2);
        
        this.setVisible(true);
        this.setDepth(1000);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.setScale(0.8);
        this.setAlpha(0);
        this.scene.tweens.add({
            targets: this,
            scaleX: 1,
            scaleY: 1,
            alpha: 1,
            duration: 200,
            ease: 'Back.out'
        });
    }

    public hide(): void {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        this.scene.tweens.add({
            targets: this,
            scaleX: 0.8,
            scaleY: 0.8,
            alpha: 0,
            duration: 200,
            ease: 'Back.in',
            onComplete: () => {
                this.setVisible(false);
            }
        });
    }
}